import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from datetime import date

API_KEY = "a77d7131abc8110bdf258dc669f6b257"  # OpenWeatherMap
STORMGLASS_API_KEY = "7df8e3e2-2b28-11f0-b92e-0242ac130003-7df8e446-2b28-11f0-b92e-0242ac130003"  # Replace with your actual key

NORMALS = {
    "April": {"temp": 14, "rain_days": 7},
    "May": {"temp": 18, "rain_days": 9}
}

st.title("üå¶Ô∏è –í—Ä–µ–º–µ –∏ –ú–æ—Ä—Å–∫–∏ –£—Å–ª–æ–≤–∏—è (–∑–∞ —Ä–∏–±–∞—Ä–∏)")
city = st.text_input("–í—ä–≤–µ–¥–∏ –≥—Ä–∞–¥:", "Plovdiv")

# --- –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ---
geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={API_KEY}"
geo_resp = requests.get(geo_url).json()
if not geo_resp:
    st.error("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞–¥–∞.")
    st.stop()
lat = geo_resp[0]["lat"]
lon = geo_resp[0]["lon"]

# --- –ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ ---
st.header("üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ –∏ –∞–Ω–∞–ª–∏–∑")
forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API_KEY}&units=metric"
response = requests.get(forecast_url)
if response.status_code != 200:
    st.error("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    st.stop()

data = response.json()
weather_data = []
for entry in data["list"]:
    dt = datetime.fromtimestamp(entry["dt"])
    temp = entry["main"]["temp"]
    rain = entry.get("rain", {}).get("3h", 0)
    weather_data.append({
        "date": dt.date(),
        "temp": temp,
        "rain": rain
    })

df = pd.DataFrame(weather_data)
daily = df.groupby("date").agg(
    avg_temp=("temp", "mean"),
    total_rain=("rain", "sum"),
    rain_occurred=("rain", lambda x: (x > 0).any())
).reset_index()

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
fig, ax = plt.subplots()
ax.plot(daily["date"], daily["avg_temp"], marker='o', color='orange')
ax.set_title("–°—Ä–µ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –¥–Ω–∏")
ax.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
ax.set_xlabel("–î–∞—Ç–∞")
plt.xticks(rotation=45)
st.pyplot(fig)

st.bar_chart(daily.set_index("date")["total_rain"], use_container_width=True)

# --- –ê–Ω–∞–ª–∏–∑ ---
current_month = datetime.today().strftime("%B")
norm_temp = NORMALS.get(current_month, {}).get("temp", None)
norm_rain_days = NORMALS.get(current_month, {}).get("rain_days", None)
avg_temp = round(daily["avg_temp"].mean(), 1)
rain_days = daily["rain_occurred"].sum()

st.subheader("üìä –°–µ–¥–º–∏—á–µ–Ω –∞–Ω–∞–ª–∏–∑")
st.write(f"–°—Ä–µ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{avg_temp}¬∞C**")
st.write(f"–î—ä–∂–¥–æ–≤–Ω–∏ –¥–Ω–∏: **{rain_days}**")

if norm_temp:
    if avg_temp > norm_temp + 2:
        st.warning(f"‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ –≤–∏—Å–æ–∫–∏ (+{avg_temp - norm_temp}¬∞C –Ω–∞–¥ –Ω–æ—Ä–º–∞—Ç–∞ –∑–∞ {current_month})")
    elif avg_temp < norm_temp - 2:
        st.warning(f"‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ –Ω–∏—Å–∫–∏ ({norm_temp - avg_temp}¬∞C –ø–æ–¥ –Ω–æ—Ä–º–∞—Ç–∞)")
    else:
        st.success("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –≤ –Ω–æ—Ä–º–∞.")

if norm_rain_days:
    if rain_days > norm_rain_days:
        st.warning("üåßÔ∏è –ü–æ–≤–µ—á–µ –¥—ä–∂–¥–æ–≤–Ω–∏ –¥–Ω–∏ –æ—Ç –æ–±–∏—á–∞–π–Ω–æ—Ç–æ.")
    else:
        st.info("‚òÄÔ∏è –ë—Ä–æ—è—Ç –Ω–∞ –¥—ä–∂–¥–æ–≤–Ω–∏—Ç–µ –¥–Ω–∏ –µ –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∞.")

# --- –í—ä–∑–¥—É—Ö ---
st.subheader("üå´Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ä–∑–¥—É—Ö–∞")
URL_AIR = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={API_KEY}"
air_response = requests.get(URL_AIR)
if air_response.status_code == 200:
    air_data = air_response.json()
    aqi = air_data["list"][0]["main"]["aqi"]
    AQI_LEVELS = {
        1: "–î–æ–±—Ä–æ",
        2: "–ü—Ä–∏–µ–º–ª–∏–≤–æ",
        3: "–£–º–µ—Ä–µ–Ω–æ",
        4: "–ù–µ–∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–æ",
        5: "–û–ø–∞—Å–Ω–æ"
    }
    st.write(f"AQI: **{aqi}** - {AQI_LEVELS.get(aqi, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
else:
    st.warning("‚ö†Ô∏è –ù—è–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ—Ç–æ –Ω–∞ –≤—ä–∑–¥—É—Ö–∞.")

# --- –ú–æ—Ä—Å–∫–∏ —É—Å–ª–æ–≤–∏—è ---
st.header("üåä –ú–æ—Ä—Å–∫–∏ —É—Å–ª–æ–≤–∏—è (–∑–∞ —Ä–∏–±–∞—Ä–∏)")
today = date.today().isoformat()
storm_url = f"https://api.stormglass.io/v2/weather/point?lat={lat}&lng={lon}&params=waveHeight,waterTemperature,windSpeed&start={today}&end={today}"
headers = {'Authorization': STORMGLASS_API_KEY}
marine_resp = requests.get(storm_url, headers=headers)

if marine_resp.status_code == 200:
    marine_data = marine_resp.json()["hours"][0]
    wave_height = marine_data["waveHeight"]["noaa"]
    water_temp = marine_data["waterTemperature"]["noaa"]
    wind_speed = marine_data["windSpeed"]["noaa"]

    st.metric("üåä –í–∏—Å–æ—á–∏–Ω–∞ –Ω–∞ –≤—ä–ª–Ω–∏—Ç–µ", f"{wave_height:.1f} m")
    st.metric("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤–æ–¥–∞—Ç–∞", f"{water_temp:.1f} ¬∞C")
    st.metric("üí® –°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –≤—è—Ç—ä—Ä–∞", f"{wind_speed:.1f} m/s")

    if wave_height > 1.5:
        st.warning("‚ö†Ô∏è –í—ä–ª–Ω–∏—Ç–µ —Å–∞ –≤–∏—Å–æ–∫–∏ ‚Äì –Ω–µ —Å–µ –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞ –∏–∑–ª–∏–∑–∞–Ω–µ –∑–∞ —Ä–∏–±–æ–ª–æ–≤.")
    else:
        st.success("‚úÖ –ú–æ—Ä—Å–∫–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–∞ –¥–æ–±—Ä–∏ –∑–∞ —Ä–∏–±–æ–ª–æ–≤.")
else:
    st.warning("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –º–æ—Ä—Å–∫–∏ –¥–∞–Ω–Ω–∏. –ü—Ä–æ–≤–µ—Ä–∏ API –∫–ª—é—á–∞.")
